**Redes Profundas Multicapa**

# Ejemplo:
input_data = np.array([3, 5])
weights = {
    'node_0_0': np.array([2,4]),
    'node_0_1': np.array([4,5]),
    'node_1_0': np.array([-1,1]),
    'node_1_1': np.array([2,2]),
    'output': np.array([2,7])
}

# Definir la funci√≥n predict_with_network
def predict_with_network(input_data_row, weights):
    # Calcular valor de node 0 primera capa oculta
    node_0_0_input = (input_data_row * weights['node_0_0']).sum()
    node_0_0_output = relu(node_0_0_input)

    # Calcular valor de node 1 primera capa oculta
    node_0_1_input = (input_data_row * weights['node_0_1']).sum()
    node_0_1_output = relu(node_0_1_input)

    # Guardar los valores de los nodos en un array: hidden_0_outputs
    hidden_0_outputs = np.array([node_0_0_output, node_0_1_output])
 
    # Calcular valor de node 0 segunda capa oculta
    node_1_0_input = (input_data_row * weights['node_1_0']).sum()
    node_1_0_output = relu(node_1_0_input)

    # Calcular valor de node 1 segunda capa oculta
    node_1_1_input = (input_data_row * weights['node_1_1']).sum()
    node_1_1_output = relu(node_1_1_input)

    # Guardar los valores de los nodos en un array: hidden_1_outputs
    hidden_1_outputs = np.array([node_1_0_output, node_1_1_output])

    # Calcular salida del modelo: model output
    
    model_output = (hidden_1_outputs*weights['output']).sum()

    # Retornar salida del modelo
    return(model_output)

print(output)
